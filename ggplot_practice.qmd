---
title: "Data Visualization with ggplot"
author: "Henron Oliver"
format: html
---


```{r}
library(tidyverse)
library(here)
library(janitor)

# Specifically for plots:
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)

# And for another dataset we'll explore:
library(gapminder)

# Spatial
library(sf)
```

## Ggplot basics

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

### The essentials
Key Elements:
  - Data
  - Axis
  - Geometry
```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point()

# second - makes the same graph

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))


# third - makes the same graph. This is the most flexible
ggplot() +
  geom_point(data = lizards,
             aes(x = total_length, y = weight))
```

## Swap out geometries

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_line()
#Bad

```

Some geometry types only need one axis
```{r}
ggplot( data = lizards, aes(x = total_length)) +
  geom_histogram()

```

Jitter plots usually are best with one categorical and one continuous variable

```{r}
ggplot(data = lizards, 
       aes(x = weight, y = common_name)) +
  geom_jitter()
```

## Aesthetic mapping
### Updating based on a constant value
Don't need to use the 'aes()' function!

```{r}
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "brown", #border color
                 fill = "yellow",
                 alpha = 0.78, #transparency
                 linetype = "twodash")

```

## Updating aesthetics based on variables
In that case, we need to use the 'aes()' function
```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name), 
             alpha = 0.3)
```

# Themes
## Update axis labels
```{r}

ggplot(data = lizards, aes(x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_linedraw() +
  labs(title = "lizards weights",
       x = "Lizard Weight (g)",
       y = "Where at the lizard was",
       subtitle = "Jornada, NM",
       color = "Lizard ethnicity")
```


```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts,
       aes(x = n, y = fct_reorder(common_name, n))) +
  geom_col() +
  labs( x = 'Individuals (n)',
        y = 'Sour cream and onion')
```

## Advanced ggplot customization

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500), #sets axis labels
                     limits = c(0, 500)) + #sets axis distance
  scale_y_continuous(breaks = seq(from = 0,
                                  to = 70,
                                  by = 10),
                     limits = c(0, 70)) +
  labs (x = 'Total Girth (mm)',
        y = "Weight (grams)") +
  theme_minimal()
  
```

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_log10()
```

```{r}
# Counting up lizards caught per day
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) +
  geom_line() 
  
```

```{r}
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("3 years"), # See date_breaks for next year!
               labels = scales::label_date("'%y")) + # See date_labels for next year!
  scale_y_log10(labels = scales::label_scientific())
```

```{r}
ggplot(data = lizard_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_pretty())
```




```{r}
# Color gradient with just two colors

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = "red", high = "navy")

# color gradient with more than 2 colors
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradientn(colors = c("orange", "grey", "hotpink"))

# create a gradient of color bins
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0, 20, 4))
```

# Use color palettes downloaded from internet
```{r}
ggplot(data = lizards,
       aes(x = common_name, y = total_length)) +
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  coord_flip() +
  labs(x = "Total length (mm)",
       y = "Species") +
  theme_minimal()
```

```{r}
# ordering species based on median length
lizards_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name, total_length, .fun = median))

# Then make a graph (use View(palettes_d_names) to see other discrete palettes in {paletteer})

ggplot(data = lizards_mean, aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_x_continuous(limits = c(0, 500)) +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  labs(y = "Lizard species",
       x = "Total length (mm)") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank()) # modify your gridlines
```

USING PATCHWORK TO CREATE COMPOUND FIGURES

```{r}
#Save plots as objects

pee <- 
  ggplot(data = lizards_mean, aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_x_continuous(limits = c(0, 500)) +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  labs(y = "Lizard species",
       x = "Total length (mm)") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank()) # modify your gridlines

pee2 <-
# color gradient with more than 2 colors
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradientn(colors = c("orange", "grey", "hotpink"))

#Patchwork - vertical bar put plots next to eachother
# The / puts plots on top of eachother
(pee | pee2) & theme_minimal()
(pee / pee2) & theme_minimal()


# combinations of net to and on top of eachother
((pee | pee2) / pee2)

```

